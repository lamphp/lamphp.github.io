<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弹痕</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lamphp.github.io/"/>
  <updated>2018-01-08T12:58:33.407Z</updated>
  <id>http://lamphp.github.io/</id>
  
  <author>
    <name>弹痕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>opencv摄像头人脸识别python</title>
    <link href="http://lamphp.github.io/2018/01/08/opencv%E6%91%84%E5%83%8F%E5%A4%B4%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABpython/"/>
    <id>http://lamphp.github.io/2018/01/08/opencv摄像头人脸识别python/</id>
    <published>2018-01-08T12:53:34.000Z</published>
    <updated>2018-01-08T12:58:33.407Z</updated>
    
    <content type="html"><![CDATA[<p>简单的opencv图片、人眼识别和摄像头人脸识别</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install opencv</span><br><span class="line">#Installing dependencies for opencv: sqlite, gdbm, xz, python3, gmp, mpfr, libmpc, isl, gcc, git, cmake, eigen, nasm, texi2html, lame, x264, xvid, ffmpeg, jpeg, libpng, libtiff, ilmbase, openexr, numpy, pcre, swig, tbb</span><br></pre></td></tr></table></figure><h1 id="图片人脸识别"><a href="#图片人脸识别" class="headerlink" title="图片人脸识别"></a>图片人脸识别</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">#获取人脸识别训练数据,看似复杂，其实就是对于人脸特征的一些描述，这样 opencv 在读取完数据后很据训练中的样品数据，就可以感知读取到的图片上的特征，进而对图片进行人脸识别。opencv官方共享的训练数据</span><br><span class="line">face_cascade = cv2.CascadeClassifier(&apos;/usr/local/homebrew/Cellar/opencv/3.4.0/share/OpenCV/haarcascades/haarcascade_frontalface_default.xml&apos;)</span><br><span class="line">#人眼识别训练数据</span><br><span class="line">eye_cascade = cv2.CascadeClassifier(&apos;/usr/local/homebrew/Cellar/opencv/3.4.0/share/OpenCV/haarcascades/haarcascade_eye.xml&apos;)</span><br><span class="line"></span><br><span class="line">#读取图片</span><br><span class="line">img = cv2.imread(&apos;/Users/xxx/Pictures/222.jpg&apos;)</span><br><span class="line">#灰度转换,灰度转换的作用就是：转换成灰度的图片的计算强度得以降低。</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">#识别人脸开始，可以随意的指定里面参数的值，来达到不同精度下的识别</span><br><span class="line">faces = face_cascade.detectMultiScale(gray, 1.3, 5)</span><br><span class="line">#scale_factor：被检测对象的尺度变化。尺度越大，越容易漏掉检测的对象，但检测速度加快；尺度越小，检测越细致准确，但检测速度变慢。</span><br><span class="line">#min_neighbors：数值越大，检测到对象的条件越苛刻；反之检测到对象的条件越宽松；</span><br><span class="line">#minSize:检测对象的大小</span><br><span class="line">print &quot;发现 &#123;0&#125; 个人脸!&quot;.format(len(faces))</span><br><span class="line"></span><br><span class="line">for (x,y,w,h) in faces:</span><br><span class="line">    img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)</span><br><span class="line">    roi_gray = gray[y:y+h, x:x+w]</span><br><span class="line">    roi_color = img[y:y+h, x:x+w]</span><br><span class="line">    #识别人眼</span><br><span class="line">    eyes = eye_cascade.detectMultiScale(roi_gray)</span><br><span class="line">    for (ex,ey,ew,eh) in eyes:</span><br><span class="line">        cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)</span><br><span class="line"></span><br><span class="line">#显示图像,编辑完的图像要么直接的被显示出来，要么就保存到物理的存储介质。</span><br><span class="line">cv2.imshow(&apos;img&apos;,img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1 id="摄像头人脸识别"><a href="#摄像头人脸识别" class="headerlink" title="摄像头人脸识别"></a>摄像头人脸识别</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(0) #0  打开摄像头</span><br><span class="line">classifier=cv2.CascadeClassifier(&quot;/usr/local/homebrew/Cellar/opencv/3.4.0/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml&quot;)</span><br><span class="line">print camera.isOpened() #判断摄像头是否打开</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    #读取视频流</span><br><span class="line">    ret,img = cap.read()</span><br><span class="line">    #识别人脸</span><br><span class="line">    faceRects = classifier.detectMultiScale(img, 1.2, 2, cv2.CASCADE_SCALE_IMAGE,(20,20))</span><br><span class="line">    if len(faceRects)&gt;0:</span><br><span class="line">        for faceRect in faceRects:</span><br><span class="line">                x, y, w, h = faceRect</span><br><span class="line">                cv2.rectangle(img, (int(x), int(y)), (int(x)+int(w), int(y)+int(h)), (0,255,0),2,0)</span><br><span class="line">    #展示视频人脸</span><br><span class="line">    cv2.imshow(&apos;video&apos;,img)</span><br><span class="line">    #q按键退出循环</span><br><span class="line">    key=cv2.waitKey(1)</span><br><span class="line">    if key==ord(&apos;q&apos;):</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单的opencv图片、人眼识别和摄像头人脸识别&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="opencv" scheme="http://lamphp.github.io/tags/opencv/"/>
    
      <category term="人脸识别" scheme="http://lamphp.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy多spider运行</title>
    <link href="http://lamphp.github.io/2018/01/08/windows%E3%80%81mac%E3%80%81android%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91shadowsocks%E6%95%99%E7%A8%8B/"/>
    <id>http://lamphp.github.io/2018/01/08/windows、mac、android科学上网shadowsocks教程/</id>
    <published>2018-01-08T12:18:24.000Z</published>
    <updated>2018-01-19T14:05:15.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、windows教程"><a href="#一、windows教程" class="headerlink" title="一、windows教程"></a>一、windows教程</h1><p>以chrome 为例：</p><ol><li>安装SwitchyOmega插件<br>下载地址：链接: <a href="https://pan.baidu.com/s/1qZAm9ly" target="_blank" rel="noopener">https://pan.baidu.com/s/1qZAm9ly</a> 密码: fr8j，包含三个文件，SwitchyOmega.crx、SwitchyOptions.bak、shadowsocks-gui-0.6.0-win-ia32.tar.xz，分别是chrome插件、规则、windows gui客户端。<br>将SwitchyOmega.crx “crx”后缀改为”zip”, 即SwitchyOmega.zip，然后解压。chrome右上角选择更多工具》扩展程序，点击左上角的开发者模式，点击“加载已解压的扩展程序”，选择刚才解压的SwitchyOmega目录打开。</li></ol><p>2.设置SwitchyOmega，点击左边“导入/导出”，“从备份文件恢复”，选择SwitchyOptions.bak文件导入，选择左边自动切换，选中autoproxy模式，“规则列表网址” 填写<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，点击“应用选项”按钮" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，点击“应用选项”按钮</a>, 浏览器右上角点击switchomgea选中自动切换。</p><p>3.打开windows客户端，解压shadowsocks-gui-0.6.0-win-ia32.tar.xz<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx3.sinaimg.cn/mw690/771d3173gy1fnm9i0oysaj20ag0d1q32.jpg" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><br>填好ip、port、passsword保存即可</p><h1 id="二、android手机教程"><a href="#二、android手机教程" class="headerlink" title="二、android手机教程"></a>二、android手机教程</h1><p>下载地址：<a href="https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.4.5/shadowsocks-nightly-4.4.5.apk" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.4.5/shadowsocks-nightly-4.4.5.apk</a><br>设置：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/mw690/771d3173gy1fnm9c9jhz3j20u01hcmyd.jpg" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><br>填好服务器、端口、密码即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、windows教程&quot;&gt;&lt;a href=&quot;#一、windows教程&quot; class=&quot;headerlink&quot; title=&quot;一、windows教程&quot;&gt;&lt;/a&gt;一、windows教程&lt;/h1&gt;&lt;p&gt;以chrome 为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装Switchy
      
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://lamphp.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>scrapy多spider运行</title>
    <link href="http://lamphp.github.io/2018/01/08/scrapy%E5%A4%9Aspider%E8%BF%90%E8%A1%8C/"/>
    <id>http://lamphp.github.io/2018/01/08/scrapy多spider运行/</id>
    <published>2018-01-08T12:18:24.000Z</published>
    <updated>2018-01-08T12:49:26.086Z</updated>
    
    <content type="html"><![CDATA[<p>脚本运行多spider爬虫</p><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `pro_list` (</span><br><span class="line">     `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &apos;auto incrment id&apos;,</span><br><span class="line">     `title` varchar(200) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;标题&apos;,</span><br><span class="line">     `wangzhan` varchar(100) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;来源&apos;,</span><br><span class="line">     `city` varchar(100) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;地区&apos;,</span><br><span class="line">     `keyword` varchar(100) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;关键字&apos;,</span><br><span class="line">     `url` text NOT NULL COMMENT &apos;地址&apos;,</span><br><span class="line">     `type` int(11) NOT NULL DEFAULT &apos;0&apos;,</span><br><span class="line">     `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE   CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">   PRIMARY KEY (`id`),</span><br><span class="line">   KEY `title` (`title`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h2 id="mysqlClient-py"><a href="#mysqlClient-py" class="headerlink" title="mysqlClient.py"></a>mysqlClient.py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line">class PyMySQL:</span><br><span class="line"></span><br><span class="line">    def __init__(self,host,user,password,charest=&apos;utf8&apos;):</span><br><span class="line">        self.host =     host</span><br><span class="line">        self.user =     user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charest  = charest</span><br><span class="line">        self.connect()</span><br><span class="line">    def connect(self):</span><br><span class="line">        try:</span><br><span class="line">            self.conn = MySQLdb.connect(host=self.host, user=self.user, passwd=self.password,charset=self.charest)</span><br><span class="line">            #print self.conn                     #查看数据库连接状态</span><br><span class="line">            self.cur = self.conn.cursor()    #连接游标</span><br><span class="line">            self.conn.autocommit(True)</span><br><span class="line">        except MySQLdb.Error,e:</span><br><span class="line">            print &quot;Error %d: %s&quot; % (e.args[0], e.args[1])</span><br><span class="line">            exit(0)</span><br><span class="line">    def selectDB(self,dbname):</span><br><span class="line">        self.conn.select_db(dbname) #选择数据库</span><br><span class="line"></span><br><span class="line">    def query(self,sql):</span><br><span class="line">        self.cur.execute(sql)</span><br><span class="line"></span><br><span class="line">    def fetchOne(self,sql):</span><br><span class="line">        self.query(sql)</span><br><span class="line">        return self.cur.fetchone()</span><br><span class="line"></span><br><span class="line">    def fetchAll(self,sql):</span><br><span class="line">        self.query(sql)</span><br><span class="line">        return self.cur.fetchall()</span><br><span class="line"></span><br><span class="line">    def fetchMany(self,sql,num):</span><br><span class="line">        self.query(sql)</span><br><span class="line">        return self.cur.fetchmany(num)</span><br><span class="line"></span><br><span class="line">    #获取所有的数据库</span><br><span class="line">    #return 元组</span><br><span class="line">    def showDatabases(self):</span><br><span class="line">        database_sql = &apos;SHOW DATABASES&apos;</span><br><span class="line">        return self.fetchAll(database_sql)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self.cur.close()</span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure><h2 id="common-py"><a href="#common-py" class="headerlink" title="common.py"></a>common.py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">from mysqlClient import PyMySQL</span><br><span class="line">import settings,</span><br><span class="line"></span><br><span class="line">class Common:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.host     = settings.MYSQL_HOST</span><br><span class="line">        self.user     = settings.MYSQL_USER</span><br><span class="line">        self.password = settings.MYSQL_PASSWORD</span><br><span class="line">        self.database = settings.MYSQL_DATABASE</span><br><span class="line">        self.mysqlobj = PyMySQL(self.host, self.user, self.password)</span><br><span class="line">        self.mysqlobj.selectDB(self.database)</span><br><span class="line"></span><br><span class="line">    #过滤关键词</span><br><span class="line">    def matchType(self,title):</span><br><span class="line">        result = True</span><br><span class="line">        for key in settings.EXCLUDE_KEYWORDS:</span><br><span class="line">            if key in title:</span><br><span class="line">                result = False</span><br><span class="line">                break</span><br><span class="line">        return result</span><br><span class="line">    #查询指定数据是否存在</span><br><span class="line">    def getOne(self, title):</span><br><span class="line">        hasExists = False</span><br><span class="line">        sql       = &quot;SELECT * FROM  pro_list WHERE title = &apos;&quot;+title+&quot;&apos;&quot;</span><br><span class="line">        result    = self.mysqlobj.fetchOne(sql)</span><br><span class="line">        if result:</span><br><span class="line">            hasExists = True</span><br><span class="line"></span><br><span class="line">        return hasExists</span><br><span class="line">    #添加到数据库</span><br><span class="line">    def addData(self, item):</span><br><span class="line">        if item[&apos;is_a&apos;] == 1:</span><br><span class="line">            type = 1</span><br><span class="line">        else:</span><br><span class="line">            type = 0</span><br><span class="line"></span><br><span class="line">        all_sql = &quot;INSERT INTO pro_list (type,title,wangzhan,city,keyword,url) values (&quot;+str(type)+&quot;,&apos;&quot;+item[&apos;title&apos;]+&quot;&apos;,&apos;&quot;+item[&apos;wangzhan&apos;]+&quot;&apos;,&apos;&quot;+item[&apos;city&apos;]+&quot;&apos;,&apos;&quot;+item[&apos;keyword&apos;]+&quot;&apos;,&apos;&quot;+item[&apos;url&apos;]+&quot;&apos;)&quot;</span><br><span class="line">        try:</span><br><span class="line">            self.mysqlobj.query(all_sql)</span><br><span class="line">            print &apos;insert pro_list success&apos;</span><br><span class="line">        except:</span><br><span class="line">            print &quot;插入失败，检查sql或者是表结构&quot;</span><br></pre></td></tr></table></figure><h2 id="multi-spider-py"><a href="#multi-spider-py" class="headerlink" title="multi_spider.py"></a>multi_spider.py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">#http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/practices.html?highlight=COMMANDS</span><br><span class="line">#scrapy shell http://xxxx.com/</span><br><span class="line"></span><br><span class="line">import scrapy</span><br><span class="line">from scrapy.crawler import CrawlerProcess</span><br><span class="line">from twisted.internet import reactor, defer</span><br><span class="line">from scrapy.crawler import CrawlerRunner</span><br><span class="line">from scrapy.utils.log import configure_logging</span><br><span class="line">from scrapy.selector import Selector</span><br><span class="line">from urllib import unquote</span><br><span class="line">import urlparse,json</span><br><span class="line">import settings</span><br><span class="line"></span><br><span class="line">from items import  ProItem</span><br><span class="line">from common import Common</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf8&apos;)</span><br><span class="line">CommonObj = Common()</span><br><span class="line">#百度招聘</span><br><span class="line">class BaiduSpider(scrapy.Spider):</span><br><span class="line">    name = &quot;baidu&quot;</span><br><span class="line">    allowed_domains = [&quot;zhaopin.baidu.com&quot;]</span><br><span class="line">    start_urls = [</span><br><span class="line">                  &apos;http://zhaopin.baidu.com/search?query=&apos;,</span><br><span class="line">    ]</span><br><span class="line">    citys = [&apos;上海&apos;,&apos;浙江&apos;,&apos;江苏&apos;,&apos;山东&apos;,&apos;湖北&apos;,&apos;深圳&apos;,&apos;广州&apos;,&apos;厦门&apos;,&apos;珠海&apos;,&apos;福建&apos;]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line"></span><br><span class="line">        #简单测试页面，自动匹配下一页</span><br><span class="line">        i = 1</span><br><span class="line">        while i &lt;= 3:</span><br><span class="line">            for keyword in settings.KEYWORDS:</span><br><span class="line">                for city in self.citys:</span><br><span class="line">                    url = response.url+keyword+&apos;&amp;city=&apos;+city</span><br><span class="line">                    yield scrapy.Request(url, callback=self.parse_item)</span><br><span class="line"></span><br><span class="line">            i+=1</span><br><span class="line"></span><br><span class="line">    def parse_item(self, response):</span><br><span class="line"></span><br><span class="line">        if response.status != 200:</span><br><span class="line">            print &quot;resquest failed&quot;</span><br><span class="line">            return false</span><br><span class="line"></span><br><span class="line">        response_url = unquote(response.url)</span><br><span class="line">        query   = urlparse.urlparse(response.url).query</span><br><span class="line">        params  = urlparse.parse_qs(query,True)</span><br><span class="line">        keyword = params[&apos;query&apos;][0]</span><br><span class="line">        city    = params[&apos;city&apos;][0]</span><br><span class="line">        if settings.IS_DEBUG:</span><br><span class="line">            print &quot;baidu:&quot;+keyword + &quot;,&quot; + response_url</span><br><span class="line"></span><br><span class="line">        #解析失败返回[]</span><br><span class="line">        selector1 = Selector(response).xpath(&apos;//div[@class=&quot;jobs-item even&quot;]/dl/dt&apos;)</span><br><span class="line">        selector2 = Selector(response).xpath(&apos;//div[@class=&quot;jobs-item odd&quot;]/dl/dt&apos;)</span><br><span class="line">        selectors = [selector1, selector2]</span><br><span class="line"></span><br><span class="line">        for sel in selectors:</span><br><span class="line">            if sel:</span><br><span class="line">                for sel in selector1:</span><br><span class="line">                    title = sel.xpath(&apos;span/text()&apos;).extract()[0]</span><br><span class="line">                    title = title.strip()</span><br><span class="line">                    match = CommonObj.matchType(title)</span><br><span class="line">                    if match:</span><br><span class="line">                        hasExists  = CommonObj.getOne(title)</span><br><span class="line">                        if not hasExists:</span><br><span class="line">                            if settings.IS_DEBUG:</span><br><span class="line">                                print title</span><br><span class="line"></span><br><span class="line">                            item  = ProItem()</span><br><span class="line">                            item[&apos;title&apos;] = title</span><br><span class="line">                            item[&apos;wangzhan&apos;] = &apos;baidu.com&apos;</span><br><span class="line">                            item[&apos;keyword&apos;] = keyword</span><br><span class="line">                            item[&apos;city&apos;]    = city</span><br><span class="line">                            item[&apos;url&apos;] = response.url</span><br><span class="line">                            if &apos;股份有限公司&apos;  in title:</span><br><span class="line">                                item[&apos;is_a&apos;]  = 1</span><br><span class="line">                            else:</span><br><span class="line">                                item[&apos;is_a&apos;]  = 0</span><br><span class="line"></span><br><span class="line">                            CommonObj.addData(item)</span><br><span class="line">                    else:</span><br><span class="line">                        print title + &quot;类型不匹配.&quot;</span><br><span class="line">            else:</span><br><span class="line">                print &quot;xpath parse failed&quot;</span><br><span class="line"></span><br><span class="line">configure_logging(&#123;&apos;LOG_FILE&apos;: settings.LOG_FILE&#125;)</span><br><span class="line">runner = CrawlerRunner()</span><br><span class="line">@defer.inlineCallbacks</span><br><span class="line">def crawl():</span><br><span class="line">    yield runner.crawl(BaiduSpider)</span><br><span class="line">    #yield runner.crawl(xxxSpider) #其它爬虫</span><br><span class="line">    reactor.stop()</span><br><span class="line"></span><br><span class="line">crawl()</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;脚本运行多spider爬虫&lt;/p&gt;
&lt;h2 id=&quot;sql&quot;&gt;&lt;a href=&quot;#sql&quot; class=&quot;headerlink&quot; title=&quot;sql&quot;&gt;&lt;/a&gt;sql&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="spider" scheme="http://lamphp.github.io/tags/spider/"/>
    
      <category term="scrapy" scheme="http://lamphp.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>区块链入门教程【转】</title>
    <link href="http://lamphp.github.io/2017/12/29/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>http://lamphp.github.io/2017/12/29/区块链入门教程【转】/</id>
    <published>2017-12-29T13:24:00.000Z</published>
    <updated>2017-12-29T14:03:21.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>区块链（blockchain）是眼下的大热门，新闻媒体大量报道，宣称它将创造未来。可是，简单易懂的入门文章却很少。区块链到底是什么，有何特别之处，很少有解释。</p></blockquote><p>【转自】<a href="http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html</a><br>下面，我就来尝试，写一篇最好懂的区块链教程。毕竟它也不是很难的东西，核心概念非常简单，几句话就能说清楚。我希望读完本文，你不仅可以理解区块链，还会明白什么是挖矿、为什么挖矿越来越难等问题。<br>需要说明的是，我并非这方面的专家。虽然很早就关注，但是仔细地了解区块链，还是从今年初开始。文中的错误和不准确的地方，欢迎大家指正。</p><h1 id="一、区块链的本质"><a href="#一、区块链的本质" class="headerlink" title="一、区块链的本质"></a>一、区块链的本质</h1><hr><p>区块链是什么？一句话，它是一种特殊的分布式数据库。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122702.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>首先，区块链的主要作用是储存信息。任何需要保存的信息，都可以写入区块链，也可以从里面读取，所以它是数据库。<br>其次，任何人都可以架设服务器，加入区块链网络，成为一个节点。区块链的世界里面，没有中心节点，每个节点都是平等的，都保存着整个数据库。你可以向任何一个节点，写入/读取数据，因为所有节点最后都会同步，保证区块链一致。</p><h1 id="二、区块链的最大特点"><a href="#二、区块链的最大特点" class="headerlink" title="二、区块链的最大特点"></a>二、区块链的最大特点</h1><hr><p>分布式数据库并非新发明，市场上早有此类产品。但是，区块链有一个革命性特点。<br>区块链没有管理员，它是彻底无中心的。其他的数据库都有管理员，但是区块链没有。如果有人想对区块链添加审核，也实现不了，因为它的设计目标就是防止出现居于中心地位的管理当局。<br>正是因为无法管理，区块链才能做到无法被控制。否则一旦大公司大集团控制了管理权，他们就会控制整个平台，其他使用者就都必须听命于他们了。<br>但是，没有了管理员，人人都可以往里面写入数据，怎么才能保证数据是可信的呢？被坏人改了怎么办？请接着往下读，这就是区块链奇妙的地方。</p><h1 id="三、区块"><a href="#三、区块" class="headerlink" title="三、区块"></a>三、区块</h1><hr><p>区块链由一个个区块（block）组成。区块很像数据库的记录，每次写入数据，就是创建一个区块。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122703.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>每个区块包含两个部分。</p><blockquote><p>区块头（Head）：记录当前区块的元信息<br> 区块体（Body）：实际数据</p></blockquote><p> 区块头包含了当前区块的多项元信息。</p><blockquote><p>生成时间<br>实际数据（即区块体）的 Hash<br>上一个区块的 Hash<br>…</p></blockquote><p>这里，你需要理解什么叫 Hash，这是理解区块链必需的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122704.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>所谓 Hash 就是计算机可以对任意内容，计算出一个长度相同的特征值。区块链的 Hash 长度是256位，这就是说，不管原始内容是什么，最后都会计算出一个256位的二进制数字。而且可以保证，只要原始内容不同，对应的 Hash 一定是不同的。</p><p>举例来说，字符串123的 Hash 是a8fdc205a9f19cc1c7507a60c4f01b13d11d7fd0（十六进制），转成二进制就是256位，而且只有123能得到这个 Hash。</p><p>因此，就有两个重要的推论。</p><blockquote><p>推论1：每个区块的 Hash 都是不一样的，可以通过 Hash 标识区块。<br>推论2：如果区块的内容变了，它的 Hash 一定会改变。</p></blockquote><h1 id="四、-Hash-的不可修改性"><a href="#四、-Hash-的不可修改性" class="headerlink" title="四、 Hash 的不可修改性"></a>四、 Hash 的不可修改性</h1><hr><p>区块与 Hash 是一一对应的，每个区块的 Hash 都是针对”区块头”（Head）计算的。</p><blockquote><p>Hash = SHA256(区块头)</p></blockquote><p>上面就是区块 Hash 的计算公式，Hash 由区块头唯一决定，SHA256是区块链的 Hash 算法。</p><p>前面说过，区块头包含很多内容，其中有当前区块体的 Hash（注意是”区块体”的 Hash，而不是整个区块），还有上一个区块的 Hash。这意味着，如果当前区块的内容变了，或者上一个区块的 Hash 变了，一定会引起当前区块的 Hash 改变。</p><p>这一点对区块链有重大意义。如果有人修改了一个区块，该区块的 Hash 就变了。为了让后面的区块还能连到它，该人必须同时修改后面所有的区块，否则被改掉的区块就脱离区块链了。由于后面要提到的原因，Hash 的计算很耗时，同时修改多个区块几乎不可能发生，除非有人掌握了全网51%以上的计算能力。</p><p>正是通过这种联动机制，区块链保证了自身的可靠性，数据一旦写入，就无法被篡改。这就像历史一样，发生了就是发生了，从此再无法改变。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122705.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>每个区块都连着上一个区块，这也是”区块链”这个名字的由来。</p><h1 id="五、采矿"><a href="#五、采矿" class="headerlink" title="五、采矿"></a>五、采矿</h1><hr><p>由于必须保证节点之间的同步，所以新区块的添加速度不能太快。试想一下，你刚刚同步了一个区块，准备基于它生成下一个区块，但这时别的节点又有新区块生成，你不得不放弃做了一半的计算，再次去同步。因为每个区块的后面，只能跟着一个区块，你永远只能在最新区块的后面，生成下一个区块。所以，你别无选择，一听到信号，就必须立刻同步。</p><p>所以，区块链的发明者中本聪（这是假名，真实身份至今未知）故意让添加新区块，变得很困难。他的设计是，平均每10分钟，全网才能生成一个新区块，一小时也就六个。</p><p>这种产出速度不是通过命令达成的，而是故意设置了海量的计算。也就是说，只有通过极其大量的计算，才能得到当前区块的有效 Hash，从而把新区块添加到区块链。由于计算量太大，所以快不起来。</p><p>这个过程就叫做采矿（mining），因为计算有效 Hash 的难度，好比在全世界的沙子里面，找到一粒符合条件的沙子。计算 Hash 的机器就叫做矿机，操作矿机的人就叫做矿工。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122706.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="六、难度系数"><a href="#六、难度系数" class="headerlink" title="六、难度系数"></a>六、难度系数</h1><hr><p>读到这里，你可能会有一个疑问，人们都说采矿很难，可是采矿不就是用计算机算出一个 Hash 吗，这正是计算机的强项啊，怎么会变得很难，迟迟算不出来呢？</p><p>原来不是任意一个 Hash 都可以，只有满足条件的 Hash 才会被区块链接受。这个条件特别苛刻，使得绝大部分 Hash 都不满足要求，必须重算。</p><p>原来，区块头包含一个难度系数（difficulty），这个值决定了计算 Hash 的难度。举例来说，第100000个区块的难度系数是 14484.16236122。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122707.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>区块链协议规定，使用一个常量除以难度系数，可以得到目标值（target）。显然，难度系数越大，目标值就越小。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122708.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Hash 的有效性跟目标值密切相关，只有小于目标值的 Hash 才是有效的，否则 Hash 无效，必须重算。由于目标值非常小，Hash 小于该值的机会极其渺茫，可能计算10亿次，才算中一次。这就是采矿如此之慢的根本原因。</p><p>区块头里面还有一个 Nonce 值，记录了 Hash 重算的次数。第 100000 个区块的 Nonce 值是274148111，即计算了 2.74 亿次，才得到了一个有效的 Hash，该区块才能加入区块链。</p><h1 id="七、难度系数的动态调节"><a href="#七、难度系数的动态调节" class="headerlink" title="七、难度系数的动态调节"></a>七、难度系数的动态调节</h1><hr><p>就算采矿很难，但也没法保证，正好十分钟产出一个区块，有时一分钟就算出来了，有时几个小时可能也没结果。总体来看，随着硬件设备的提升，以及矿机的数量增长，计算速度一定会越来越快。</p><p>为了将产出速率恒定在十分钟，中本聪还设计了难度系数的动态调节机制。他规定，难度系数每两周（2016个区块）调整一次。如果这两周里面，区块的平均生成速度是9分钟，就意味着比法定速度快了10%，因此难度系数就要调高10%；如果平均生成速度是11分钟，就意味着比法定速度慢了10%，因此难度系数就要调低10%。</p><p>难度系数越调越高（目标值越来越小），导致了采矿越来越难。</p><h1 id="八、区块链的分叉"><a href="#八、区块链的分叉" class="headerlink" title="八、区块链的分叉"></a>八、区块链的分叉</h1><hr><p>即使区块链是可靠的，现在还有一个问题没有解决：如果两个人同时向区块链写入数据，也就是说，同时有两个区块加入，因为它们都连着前一个区块，就形成了分叉。这时应该采纳哪一个区块呢？<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122709.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>现在的规则是，新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122710.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>由于新区块的生成速度由计算能力决定，所以这条规则就是说，拥有大多数计算能力的那条分支，就是正宗的比特链。</p><h1 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h1><hr><p>区块链作为无人管理的分布式数据库，从2009年开始已经运行了8年，没有出现大的问题。这证明它是可行的。</p><p>但是，为了保证数据的可靠性，区块链也有自己的代价。一是效率，数据写入区块链，最少要等待十分钟，所有节点都同步数据，则需要更多的时间；二是能耗，区块的生成需要矿工进行无数无意义的计算，这是非常耗费能源的。</p><p>因此，区块链的适用场景，其实非常有限。</p><blockquote><pre><code>不存在所有成员都信任的管理当局写入的数据不要求实时使用挖矿的收益能够弥补本身的成本</code></pre></blockquote><p>如果无法满足上述的条件，那么传统的数据库是更好的解决方案。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017122711.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>目前，区块链最大的应用场景（可能也是唯一的应用场景），就是以比特币为代表的加密货币。下一篇文章，我将会介绍比特币的入门知识。</p><h1 id="十、参考链接"><a href="#十、参考链接" class="headerlink" title="十、参考链接"></a>十、参考链接</h1><hr><p><a href="https://medium.freecodecamp.org/how-does-blockchain-really-work-i-built-an-app-to-show-you-6b70cd4caf7d" target="_blank" rel="noopener">How does blockchain really work?</a>, by Sean Han<br><a href="http://www.righto.com/2014/02/bitcoin-mining-hard-way-algorithms.html" target="_blank" rel="noopener">Bitcoin mining the hard way: the algorithms, protocols, and bytes</a>, by Ken Shirriff</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;区块链（blockchain）是眼下的大热门，新闻媒体大量报道，宣称它将创造未来。可是，简单易懂的入门文章却很少。区块链到底是什么，有何特别之处，很少有解释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【转自】&lt;a href=&quot;http://www.
      
    
    </summary>
    
    
      <category term="区块链" scheme="http://lamphp.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
</feed>
